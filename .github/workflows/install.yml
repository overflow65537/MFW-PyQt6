name: install

on:
  push:
    tags:
      - "v*"
  pull_request:  
    branches:    
      - main    
  workflow_dispatch:

jobs:


  changelog:
    name: Generate changelog
    runs-on: ubuntu-latest
    outputs:
      release_body: ${{ steps.git-cliff.outputs.content }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate a changelog
        uses: orhun/git-cliff-action@v4
        id: git-cliff
        with:
          config: cliff.toml
          args: -vv --latest --strip header
        env:
          OUTPUT: CHANGES.md
          GITHUB_REPO: ${{ github.repository }}

  meta:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - id: set_tag
        run: |
          is_release=${{ startsWith(github.ref, 'refs/tags/v') }}
          tag=$(git describe --tags --match "v*" ${{ github.ref }} || true)
          if [[ $tag != v* ]]; then
            tag=$(curl -sX GET "https://api.github.com/repos/${{ github.repository }}/releases/latest" --header 'authorization: Bearer ${{ secrets.GITHUB_TOKEN }}' | awk '/tag_name/{print $4}' FS='["]')
            if [[ $tag != v* ]]; then
              tag="v0.0.0"
            fi
            tag=$(date "+$tag-%y%m%d-$(git rev-parse --short HEAD)")
          fi
          if ! $is_release ; then
            prefix=${tag%-*-*}
            suffix=${tag#$prefix-}
            tag="$prefix-ci.$suffix"
          fi

          echo "tag=$tag" >> $GITHUB_OUTPUT
          echo "is_release=$is_release" >> $GITHUB_OUTPUT
        shell: bash

    outputs:
      tag: ${{ steps.set_tag.outputs.tag }}
      is_release: ${{ steps.set_tag.outputs.is_release }}

  pyinstaller:
    needs: meta
    name: Build (${{ matrix.platform }}-${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-13
            platform: macos
            arch: x86_64 
            target_arch: x86_64
            python_arch: x64

          - os: macos-13
            platform: macos
            arch: arm64  
            target_arch: arm64
            python_arch: arm64

          - os: ubuntu-latest
            platform: linux
            arch: x86_64

          - os: ubuntu-latest
            platform: linux
            arch: arm64
            
          - os: windows-latest
            platform: win
            arch: x86_64
            
          - os: windows-latest
            platform: win
            arch: arm64

      fail-fast: false

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        if: matrix.os == 'macos-13'
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'
          architecture: ${{ matrix.python_arch }}

      - name: Set up Python (other)
        if: matrix.os != 'macos-13' 
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install dependencies
        if: matrix.os == 'macos-13'
        run: |
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            arch -x86_64 python -m pip install --force-reinstall --no-cache-dir pyinstaller -r requirements.txt
          else
            python -m pip install --force-reinstall --no-cache-dir pyinstaller -r requirements.txt
          fi

      - name: Install dependencies (other)
        if: matrix.os != 'macos-13' 
        run: |
          python -m pip install --upgrade pip
          python -m pip install pyinstaller
          python -m pip install -r./requirements.txt

      - name: Install(macos)
        if: matrix.os == 'macos-13'
        run: |
          sudo python ./build_pyinstaller.py ${{ matrix.platform }} ${{ matrix.arch }} ${{ needs.meta.outputs.tag }}
        shell: pwsh  

      - name: Install(other)
        if: matrix.os != 'macos-13'
        run: |
          python ./build_pyinstaller.py ${{ matrix.platform }} ${{ matrix.arch }} ${{ needs.meta.outputs.tag }}
        shell: pwsh  

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: MFW-PyQt6-${{ matrix.platform }}-${{ matrix.arch }}
          path: "dist/MFW"


  release:
    if: ${{ needs.meta.outputs.is_release == 'true' }}
    needs: [meta, pyinstaller,changelog]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: assets

      - run: |
          cd assets
          for f in *; do
            (cd $f && zip -r -9 ../$f-${{ needs.meta.outputs.tag }}.zip .)
          done

      - uses: softprops/action-gh-release@v2
        with:
          files: assets/*
          tag_name: ${{ needs.meta.outputs.tag }}
          body: ${{ needs.changelog.outputs.release_body }}
          draft: false
          prerelease: false

      - name: Trigger MirrorChyanUploading
        run: |
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan
          gh workflow run --repo $GITHUB_REPOSITORY mirrorchyan_release_note
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      